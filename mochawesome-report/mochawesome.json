{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-08T03:45:35.431Z",
    "end": "2019-11-08T03:45:35.894Z",
    "duration": 463,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "345b1bc3-ac4b-4829-9a60-d5d962edba39",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "41e7e95d-e601-48c8-81b5-40b3c1f0b43a",
        "title": "OMDB Movie List",
        "fullFile": "/home/wina/Documents/github-wina/API-Automation-Test-With-Mocha/api/test/list-movie-page-test.js",
        "file": "/api/test/list-movie-page-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get User want to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie list",
            "timedOut": false,
            "duration": 91,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "e2c6210c-6ddb-4ee8-b6c8-f4cb61913dd4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List By Year",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List By Year",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByYear(apiKey, keySearch, year);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "54f32e36-d4fc-4001-9d68-bda9e30bcd89",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List only following in type series",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List only following in type series",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'episode');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "25198c65-491b-4422-9b1c-560a9e399252",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List only following in type series",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List only following in type series",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'movie');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "6fed228a-74a0-431b-8141-a2c89d99812a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List only following in type series",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List only following in type series",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'series');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "4fff02a9-9262-42da-815a-ea725416a829",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List By Plot",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List By Plot",
            "timedOut": false,
            "duration": 56,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByPlot(apiKey, keySearch, 'short');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "589558d6-065a-4d9c-a45e-6155b4181561",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List By Plot",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List By Plot",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByPlot(apiKey, keySearch, 'full');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "823be74b-ea14-469c-bc27-c5b25b494ac6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got error message when User send request without key of search",
            "fullTitle": "OMDB Movie List @get User should got error message when User send request without key of search",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "ced7a4d0-11ab-4151-9c3d-8b60251b90d9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got error 401 when User send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get User should got error 401 when User send request with invalid API Key",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "51e1d661-e65b-4695-b62f-ce38ce20e6f0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got error message when User send request without API Key Params",
            "fullTitle": "OMDB Movie List @get User should got error message when User send request without API Key Params",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListNoAPIKey(keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "1370cf9f-af1c-42d5-a0c8-97a19836ffa2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got status code 200 but response is false",
            "fullTitle": "OMDB Movie List @get User should got status code 200 but response is false",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'cinema');\nassert(response.status).to.equal(200);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Movie not found!');",
            "err": {},
            "isRoot": false,
            "uuid": "7078964b-c535-4a07-b3a1-a94535bec30a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e2c6210c-6ddb-4ee8-b6c8-f4cb61913dd4",
          "54f32e36-d4fc-4001-9d68-bda9e30bcd89",
          "25198c65-491b-4422-9b1c-560a9e399252",
          "6fed228a-74a0-431b-8141-a2c89d99812a",
          "4fff02a9-9262-42da-815a-ea725416a829",
          "589558d6-065a-4d9c-a45e-6155b4181561",
          "823be74b-ea14-469c-bc27-c5b25b494ac6",
          "ced7a4d0-11ab-4151-9c3d-8b60251b90d9",
          "51e1d661-e65b-4695-b62f-ce38ce20e6f0",
          "1370cf9f-af1c-42d5-a0c8-97a19836ffa2",
          "7078964b-c535-4a07-b3a1-a94535bec30a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 446,
        "root": false,
        "rootEmpty": false,
        "_timeout": 30000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 30000
  },
  "copyrightYear": 2019
}
{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-08T03:27:01.098Z",
    "end": "2019-11-08T03:27:01.809Z",
    "duration": 711,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "aaace82b-ca2e-4999-a1ce-2519df71b9ca",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d409c780-bc9d-4e5a-b602-8e799c297663",
        "title": "OMDB Movie List",
        "fullFile": "/home/wina/Documents/github-wina/API-Automation-Test-With-Mocha/api/test/list-movie-page.js",
        "file": "/api/test/list-movie-page.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get User want to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie list",
            "timedOut": false,
            "duration": 87,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "c2002ce1-0b3d-4d22-a9b7-a14b6f78c7e9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List By Year",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List By Year",
            "timedOut": false,
            "duration": 56,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByYear(apiKey, keySearch, year);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "f69ca1f6-592f-4604-9f4b-d412e9966d03",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List only following in type series",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List only following in type series",
            "timedOut": false,
            "duration": 103,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'episode');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "f0c53d25-9e97-417c-ae62-2b093363020d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List only following in type series",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List only following in type series",
            "timedOut": false,
            "duration": 84,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'movie');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "f01b4798-a53b-4953-bb9e-08269c8fe29f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List only following in type series",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List only following in type series",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'series');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "5086c3d4-6901-4589-9428-1d0995b78fa8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List By Plot",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List By Plot",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByPlot(apiKey, keySearch, 'short');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "290a2a05-cf0d-4289-9833-25fd61501041",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User want to get OMDB Movie List By Plot",
            "fullTitle": "OMDB Movie List @get User want to get OMDB Movie List By Plot",
            "timedOut": false,
            "duration": 50,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByPlot(apiKey, keySearch, 'full');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "a6672757-c129-49fb-91dc-409fa0098398",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got error message when User send request without key of search",
            "fullTitle": "OMDB Movie List @get User should got error message when User send request without key of search",
            "timedOut": false,
            "duration": 53,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "f743eee9-a5b2-4fd3-8abb-c2ae08dd0eae",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got error 401 when User send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get User should got error 401 when User send request with invalid API Key",
            "timedOut": false,
            "duration": 99,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "7a05659f-a24f-420e-af31-bee62851bdab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got error message when User send request without API Key Params",
            "fullTitle": "OMDB Movie List @get User should got error message when User send request without API Key Params",
            "timedOut": false,
            "duration": 35,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListNoAPIKey(keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "1822cdcd-4d49-4dc8-bf7f-8b3737b1e833",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get User should got status code 200 but response is false",
            "fullTitle": "OMDB Movie List @get User should got status code 200 but response is false",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'cinema');\nassert(response.status).to.equal(200);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Movie not found!');",
            "err": {},
            "isRoot": false,
            "uuid": "7c4b1b17-2cdb-40a2-985a-49cdafef2617",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c2002ce1-0b3d-4d22-a9b7-a14b6f78c7e9",
          "f69ca1f6-592f-4604-9f4b-d412e9966d03",
          "f0c53d25-9e97-417c-ae62-2b093363020d",
          "f01b4798-a53b-4953-bb9e-08269c8fe29f",
          "5086c3d4-6901-4589-9428-1d0995b78fa8",
          "290a2a05-cf0d-4289-9833-25fd61501041",
          "a6672757-c129-49fb-91dc-409fa0098398",
          "f743eee9-a5b2-4fd3-8abb-c2ae08dd0eae",
          "7a05659f-a24f-420e-af31-bee62851bdab",
          "1822cdcd-4d49-4dc8-bf7f-8b3737b1e833",
          "7c4b1b17-2cdb-40a2-985a-49cdafef2617"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 690,
        "root": false,
        "rootEmpty": false,
        "_timeout": 30000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 30000
  },
  "copyrightYear": 2019
}
{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-07T16:08:12.152Z",
    "end": "2019-11-07T16:08:16.003Z",
    "duration": 3851,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "b044adea-c2d0-4da4-b5be-25ea16587d62",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6a7197b7-d8c7-472b-97a3-155d73705c1a",
        "title": "OMDB Movie List",
        "fullFile": "/home/wina/Documents/github-wina/API-Automation-Test-With-Mocha/api/test/list-movie-page.js",
        "file": "/api/test/list-movie-page.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 390,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "ae46b999-4bb2-4b7b-84a6-0a65099f0ae4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 384,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "969641b2-2782-40f7-96b9-bd334d492f6e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 245,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "17ce5171-8c4a-43c3-b4b4-60dd42e4789b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 246,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch('', keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "14146ec6-ad28-4512-b800-ff04111120ab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I want to be able to get OMDB Movie List By Year",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie List By Year",
            "timedOut": false,
            "duration": 323,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByYear(apiKey, keySearch, 'xxx');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "33011589-623d-4231-95ba-269034f02e3f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "timedOut": false,
            "duration": 407,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'episode');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "1aa8fa2e-0e1b-4d7b-8486-eeac7df831b1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "timedOut": false,
            "duration": 409,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'movie');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "005b3861-b4a7-4bd5-9453-9cc2a9282210",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "timedOut": false,
            "duration": 410,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'series');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "9baae2f4-ef9e-4026-b501-55219ca189a2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie List only following in type series, movie and episode",
            "timedOut": false,
            "duration": 1023,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByType(apiKey, keySearch, 'cinema');\nassert(response.status).to.equal(200);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Movie not found!');",
            "err": {},
            "isRoot": false,
            "uuid": "f28d9914-39a8-4167-a1e8-0a7398104efb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ae46b999-4bb2-4b7b-84a6-0a65099f0ae4",
          "969641b2-2782-40f7-96b9-bd334d492f6e",
          "17ce5171-8c4a-43c3-b4b4-60dd42e4789b",
          "14146ec6-ad28-4512-b800-ff04111120ab",
          "33011589-623d-4231-95ba-269034f02e3f",
          "1aa8fa2e-0e1b-4d7b-8486-eeac7df831b1",
          "005b3861-b4a7-4bd5-9453-9cc2a9282210",
          "9baae2f4-ef9e-4026-b501-55219ca189a2",
          "f28d9914-39a8-4167-a1e8-0a7398104efb"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3837,
        "root": false,
        "rootEmpty": false,
        "_timeout": 30000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 30000
  },
  "copyrightYear": 2019
}
{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-07T15:09:21.324Z",
    "end": "2019-11-07T15:09:23.558Z",
    "duration": 2234,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "5feba227-4920-44b5-ad9b-8c034bf6edf1",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "3e6c1e4f-0eeb-400b-8bd4-de0695754139",
        "title": "OMDB Movie List",
        "fullFile": "/home/wina/Documents/github-wina/API-Automation-Test-With-Mocha/api/test/list-movie-page.js",
        "file": "/api/test/list-movie-page.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 425,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "b57225df-6cae-4ccb-b2b5-fa0b07e9dfaa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 355,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "762e594f-2b4c-4362-bc7a-643517d6f4d2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 834,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "43f6ebac-d692-405e-933f-7378ba95f758",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 287,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearch('', keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "d210a3b6-d949-489d-aad1-9b82551ca240",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I want to be able to get OMDB Movie List By Year",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie List By Year",
            "timedOut": false,
            "duration": 322,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieListSearchByYear(apiKey, keySearch, 'xxx');\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "bd0e8b7d-c61c-406d-bfd6-99af4eeefb06",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b57225df-6cae-4ccb-b2b5-fa0b07e9dfaa",
          "762e594f-2b4c-4362-bc7a-643517d6f4d2",
          "43f6ebac-d692-405e-933f-7378ba95f758",
          "d210a3b6-d949-489d-aad1-9b82551ca240",
          "bd0e8b7d-c61c-406d-bfd6-99af4eeefb06"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2223,
        "root": false,
        "rootEmpty": false,
        "_timeout": 30000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 30000
  },
  "copyrightYear": 2019
}